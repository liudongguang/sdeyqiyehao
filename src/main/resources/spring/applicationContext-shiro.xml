<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager"/>
		<!-- override these for application-specific URLs if you like:-->
        <property name="loginUrl" value="/login.jsp"/>
        <property name="successUrl" value="/index.jsp"/>
        <property name="unauthorizedUrl" value="/error.jsp"/>
		<!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean  -->
		<!-- defined will be automatically acquired and available via its beanName in chain        -->
		<!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
		<!-- <property name="filters">
            <util:map>
                <entry key="anAlias" value-ref="someFilter"/>
            </util:map>
        </property> -->
		<property name="filterChainDefinitions">
			<value>
				# some example chain definitions:
				/shirotest/login = anon
				/shirotest/** = authc
				/** = anon
				# more URL-to-FilterChain definitions here
			</value>
		</property>
	</bean>
	<!--**************************************************************************-->
	<!-- 会话ID生成器 -->
	<bean id="sessionIdGenerator"
		  class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>
	<!-- 会话DAO -->
	<bean id="sessionDAO"
		  class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
		<property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
		<property name="sessionIdGenerator" ref="sessionIdGenerator"/>
	</bean>
	<!-- 会话Cookie模板 -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="sid"/>
		<property name="httpOnly" value="true"/>
		<property name="maxAge" value="180000"/>
	</bean>
	<!-- 会话验证调度器 -->
	<bean id="sessionValidationScheduler"
		  class="com.shiro.impl.quartz2.QuartzSessionValidationScheduler">
		<property name="sessionValidationInterval" value="1800000"/>
		<property name="sessionManager" ref="sessionManager"/>
	</bean>
	<!-- 会话管理器 -->
	<bean id="sessionManager"
		  class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!--全局过期时间（毫秒为单位）默认30分钟-->
		<property name="globalSessionTimeout" value="1800000"/>
		<property name="deleteInvalidSessions" value="true"/>
		<property name="sessionValidationSchedulerEnabled" value="true"/>
		<property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
		<property name="sessionDAO" ref="sessionDAO"/>
		<property name="sessionIdCookieEnabled" value="true"/>
		<property name="sessionIdCookie" ref="sessionIdCookie"/>
	</bean>
	<!-- 凭证匹配器 -->
	<bean id="credentialsMatcher" class="com.shiro.impl.credentials.RetryLimitHashedCredentialsMatcher">
		<property name="hashAlgorithmName" value="md5" />
		<property name="hashIterations" value="2" />
		<property name="storedCredentialsHexEncoded" value="true" />
	</bean>
	<!--缓存-->
	<!--ehcache-->
	<!-- shiro的缓存管理器，然后需要将缓存管理器注入到安全管理其中  -->
	<bean id="shiroEhcacheManager" class="com.shiro.cache.EhcacheShiroManager">
		<!--classpath是缓存属性的配置文件  -->
		<property name="cacheManagerConfigFile" value="classpath:ehcache.xml" />
	</bean>
	<!-- Define the Shiro Realm implementation you want to use to connect to your back-end -->
	<!-- security datasource: -->
	<bean id="myRealm" class="com.shiro.UserRealm">
		<property name="credentialsMatcher" ref="credentialsMatcher" />
		<property name="cachingEnabled" value="true"/>
		<property name="authorizationCachingEnabled" value="true"/>
		<property name="authorizationCacheName" value="AuthorizationCahce"></property>
	</bean>
	<!--**************************************************************************-->
	<!-- Define any javax.servlet.Filter beans you want anywhere in this application context.   -->
	<!-- They will automatically be acquired by the 'shiroFilter' bean above and made available -->
	<!-- to the 'filterChainDefinitions' property.  Or you can manually/explicitly add them     -->
	<!-- to the shiroFilter's 'filters' Map if desired. See its JavaDoc for more details.
	<bean id="someFilter" class=""/>
	<bean id="anotherFilter" class="">  </bean>
	 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
		<property name="realm" ref="myRealm"/>
		<!-- By default the servlet container sessions will be used.  Uncomment this line
             to use shiro's native sessions (see the JavaDoc for more): -->
		<!-- <property name="sessionMode" value="native"/> -->
		<!--
		<property name="sessionManager" ref="sessionManager"/>
		-->
		<property name="cacheManager" ref="shiroEhcacheManager"/>
	</bean>
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
	<!-- Enable Shiro Annotations for Spring-configured beans.  Only run after -->
	<!-- the lifecycleBeanProcessor has run: -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager"/>
	</bean>
</beans>
